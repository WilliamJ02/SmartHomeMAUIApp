@page "/"
@using Shared.Handlers
@using Shared.Models
@using SmartHomeMAUIApp.Components.Layout
@using SmartHomeMAUIApp.ViewModels
@inject HomeViewModel viewModel

<div class="grid-container">
    @if (Devices != null && Devices.Any())
    {
        @foreach (var device in Devices)
        {
            <div class="grid-item">
                <div class="grid-item-left">
                    <img src="images/lightbulb_purple.png" class="lightbulb">
                    <p class="device-name">@device?.DeviceName</p>

                    <p class="device-state">@((device?.DeviceState ?? false) ? "On" : "Off")</p>

                    <p class="device-brightness">Brightness: @(device?.Brightness > 0 ? device.Brightness : 0)%</p>

                    <p class="device-deviceid">
                        @device?.DeviceId
                    </p>
                    
                    <p class="device-connectionstate">
                        @((device?.ConnectionState ?? false) ? "Connected" : "Disconnected")
                    </p>
                </div>
            </div>
        }
    }
    else
    {
        <h1>Loading devices...</h1>
    }
</div>

@code {
    private IEnumerable<LampDevice> Devices = new List<LampDevice>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (viewModel.IotHubInstance.IsRegistryInitialized)
            {
                Devices = await viewModel.GetDevicesAsync();
                viewModel.Timer = new Timer(async _ => await SetDevicesAsync(), null, 0, viewModel.TimerInterval);
            }
            else
            {
                Console.WriteLine("RegistryManager is not initialized.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
        }
    }

    private async Task SetDevicesAsync()
    {
        try
        {
            if (viewModel.IotHubInstance.IsRegistryInitialized)
            {
                Devices = await viewModel.GetDevicesAsync();
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating devices: {ex.Message}");
        }
    }
}
